// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String  @id @default(uuid()) @db.Uuid
  name         String
  email        String  @unique
  password     String
  department   String
  stdId        String? // Only for students
  phone        String
  role         Role    @default(STUDENT)
  isApproved   Boolean @default(false)
  profileImage String?

  // Relations
  achievements         Achievement[]         @relation("CreatedAchievements")
  publications         ResearchPublication[] @relation("CreatedPublications")
  approvedAchievements Achievement[]         @relation("AchievementApprovals")
  approvedPublications ResearchPublication[] @relation("PublicationApprovals")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Achievement {
  id          String     @id @default(uuid()) @db.Uuid
  title       String
  description String
  category    String?
  date        DateTime
  fileUrl     String
  visibility  Visibility @default(PUBLIC)

  // Creator
  user   User   @relation("CreatedAchievements", fields: [userId], references: [id])
  userId String @db.Uuid

  // Approval
  isApproved   Boolean @default(false)
  approvedBy   User?   @relation("AchievementApprovals", fields: [approvedById], references: [id])
  approvedById String? @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ResearchPublication {
  id                String     @id @default(uuid()) @db.Uuid
  title             String
  abstract          String
  authors           Json?
  publicationYear   Int
  journalConference String
  doi               String
  fileUrl           String
  publishedAt       DateTime
  visibility        Visibility @default(PUBLIC)

  // Creator
  user   User   @relation("CreatedPublications", fields: [userId], references: [id])
  userId String @db.Uuid

  // Approval
  isApproved   Boolean @default(false)
  approvedBy   User?   @relation("PublicationApprovals", fields: [approvedById], references: [id])
  approvedById String? @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  STUDENT
  FACULTY
  ADMIN
}

enum Visibility {
  PUBLIC
  PRIVATE
}
